import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'

import { setAuthToken } from '../../app/helpers/utils'
import type { AppState } from '../../app/store'
import UserType from '../../app/types/auth/user'
import Status from '../../app/types/status'

import { getCheck, postLogin } from './authAPI'

interface AuthState {
    token: string | null
    data: UserType | null
    status: Status
}

const initialState: AuthState = {
    token: null,
    data: null,
    status: Status.IDLE,
}

// Lives
export const login = createAsyncThunk('auth/login', async (data: { username: string, password: string }) => await postLogin(data))
export const check = createAsyncThunk('auth/check', async () => {
    const token = localStorage.getItem('token')
    if (token) {
        setAuthToken(token)
        return await getCheck()
    }
})

const dataLoading = (state: AuthState) => {
    state.status = Status.LOADING
}

export const authSlice = createSlice({
    name: 'auth',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        logout: (state) => {
            setAuthToken()
            localStorage.removeItem('token')
            state.token = null
            state.data = null
            state.status = Status.IDLE
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(login.pending, dataLoading)
            .addCase(login.fulfilled, (state, action) => {
                localStorage.setItem('token', action.payload.token)
                state.token = action.payload.token
                state.data = action.payload.data
                state.status = Status.IDLE
            })
            .addCase(login.rejected, (state) => {
                state.token = null
                state.data = null
                state.status = Status.FAILED
            })

            .addCase(check.pending, dataLoading)
            .addCase(check.fulfilled, (state, action) => {
                if (action.payload) {
                    const token = localStorage.getItem('token')
                    setAuthToken(token)
                    state.token = token
                    state.data = action.payload.data
                    state.status = Status.IDLE
                } else {
                    setAuthToken()
                    state.token = null
                    state.data = null
                    state.status = Status.FAILED
                }
            })
            .addCase(check.rejected, (state) => {
                state.token = null
                state.data = null
                state.status = Status.FAILED
            })
    },
})

export const { logout } = authSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.auth.value)`
export const selectAuth = (state: AppState) => state.auth

export default authSlice.reducer